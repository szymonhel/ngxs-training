/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.7.4.0 (NJsonSchema v10.1.26.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const CALCULATOR_API_BASE_URL = new InjectionToken<string>('CALCULATOR_API_BASE_URL');

@Injectable()
export class CalculatorApiClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(CALCULATOR_API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @param value (optional) 
     * @param period (optional) 
     * @param type (optional) 
     * @param periodType (optional) 
     * @param paybackPlan (optional) 
     * @return Success
     */
    loanCalculator(value: number | undefined, period: number | undefined, type: ELoanType | undefined, periodType: EPeriodType | undefined, paybackPlan: EPaybackPlan | undefined): Observable<LoanCalculationResult> {
        let url_ = this.baseUrl + "/loan/calculator?";
        if (value === null)
            throw new Error("The parameter 'value' cannot be null.");
        else if (value !== undefined)
            url_ += "Value=" + encodeURIComponent("" + value) + "&";
        if (period === null)
            throw new Error("The parameter 'period' cannot be null.");
        else if (period !== undefined)
            url_ += "Period=" + encodeURIComponent("" + period) + "&";
        if (type === null)
            throw new Error("The parameter 'type' cannot be null.");
        else if (type !== undefined)
            url_ += "Type=" + encodeURIComponent("" + type) + "&";
        if (periodType === null)
            throw new Error("The parameter 'periodType' cannot be null.");
        else if (periodType !== undefined)
            url_ += "PeriodType=" + encodeURIComponent("" + periodType) + "&";
        if (paybackPlan === null)
            throw new Error("The parameter 'paybackPlan' cannot be null.");
        else if (paybackPlan !== undefined)
            url_ += "PaybackPlan=" + encodeURIComponent("" + paybackPlan) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processLoanCalculator(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processLoanCalculator(<any>response_);
                } catch (e) {
                    return <Observable<LoanCalculationResult>><any>_observableThrow(e);
                }
            } else
                return <Observable<LoanCalculationResult>><any>_observableThrow(response_);
        }));
    }

    protected processLoanCalculator(response: HttpResponseBase): Observable<LoanCalculationResult> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = LoanCalculationResult.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Server Error", status, _responseText, _headers);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Bad Request", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<LoanCalculationResult>(<any>null);
    }
}

export enum ELoanType {
    House = "House",
}

export enum EPeriodType {
    Year = "Year",
}

export enum EPaybackPlan {
    ConstPrincipalAmount = "ConstPrincipalAmount",
}

export class InstallmentDto implements IInstallmentDto {
    principal?: number;
    interest?: number;
    installmentDate?: Date;
    payment?: number;

    constructor(data?: IInstallmentDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.principal = _data["principal"];
            this.interest = _data["interest"];
            this.installmentDate = _data["installmentDate"] ? new Date(_data["installmentDate"].toString()) : <any>undefined;
            this.payment = _data["payment"];
        }
    }

    static fromJS(data: any): InstallmentDto {
        data = typeof data === 'object' ? data : {};
        let result = new InstallmentDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["principal"] = this.principal;
        data["interest"] = this.interest;
        data["installmentDate"] = this.installmentDate ? this.installmentDate.toISOString() : <any>undefined;
        data["payment"] = this.payment;
        return data; 
    }
}

export interface IInstallmentDto {
    principal?: number;
    interest?: number;
    installmentDate?: Date;
    payment?: number;
}

export class LoanCalculationResult implements ILoanCalculationResult {
    totalPrincipal?: number;
    totalInterest?: number;
    totalPayment?: number;
    installments?: InstallmentDto[] | undefined;

    constructor(data?: ILoanCalculationResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.totalPrincipal = _data["totalPrincipal"];
            this.totalInterest = _data["totalInterest"];
            this.totalPayment = _data["totalPayment"];
            if (Array.isArray(_data["installments"])) {
                this.installments = [] as any;
                for (let item of _data["installments"])
                    this.installments.push(InstallmentDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): LoanCalculationResult {
        data = typeof data === 'object' ? data : {};
        let result = new LoanCalculationResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalPrincipal"] = this.totalPrincipal;
        data["totalInterest"] = this.totalInterest;
        data["totalPayment"] = this.totalPayment;
        if (Array.isArray(this.installments)) {
            data["installments"] = [];
            for (let item of this.installments)
                data["installments"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ILoanCalculationResult {
    totalPrincipal?: number;
    totalInterest?: number;
    totalPayment?: number;
    installments?: InstallmentDto[] | undefined;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}